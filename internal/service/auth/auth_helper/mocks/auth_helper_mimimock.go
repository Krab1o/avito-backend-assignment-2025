// Code generated by http://github.com/gojuno/minimock (v3.4.5). DO NOT EDIT.

package mocks

//go:generate minimock -i github.com/Krab1o/avito-backend-assignment-2025/internal/service/auth/auth_helper.AuthHelper -o auth_helper_mimimock.go -n AuthHelperMock -p mocks

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// AuthHelperMock implements mm_authhelper.AuthHelper
type AuthHelperMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcGenerateJWT          func(userID int64, jwtSecret []byte, jwtTimeout int) (s1 string, err error)
	funcGenerateJWTOrigin    string
	inspectFuncGenerateJWT   func(userID int64, jwtSecret []byte, jwtTimeout int)
	afterGenerateJWTCounter  uint64
	beforeGenerateJWTCounter uint64
	GenerateJWTMock          mAuthHelperMockGenerateJWT

	funcVerifyPassword          func(hashedPassword string, candidatePassword string) (b1 bool)
	funcVerifyPasswordOrigin    string
	inspectFuncVerifyPassword   func(hashedPassword string, candidatePassword string)
	afterVerifyPasswordCounter  uint64
	beforeVerifyPasswordCounter uint64
	VerifyPasswordMock          mAuthHelperMockVerifyPassword
}

// NewAuthHelperMock returns a mock for mm_authhelper.AuthHelper
func NewAuthHelperMock(t minimock.Tester) *AuthHelperMock {
	m := &AuthHelperMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GenerateJWTMock = mAuthHelperMockGenerateJWT{mock: m}
	m.GenerateJWTMock.callArgs = []*AuthHelperMockGenerateJWTParams{}

	m.VerifyPasswordMock = mAuthHelperMockVerifyPassword{mock: m}
	m.VerifyPasswordMock.callArgs = []*AuthHelperMockVerifyPasswordParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mAuthHelperMockGenerateJWT struct {
	optional           bool
	mock               *AuthHelperMock
	defaultExpectation *AuthHelperMockGenerateJWTExpectation
	expectations       []*AuthHelperMockGenerateJWTExpectation

	callArgs []*AuthHelperMockGenerateJWTParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// AuthHelperMockGenerateJWTExpectation specifies expectation struct of the AuthHelper.GenerateJWT
type AuthHelperMockGenerateJWTExpectation struct {
	mock               *AuthHelperMock
	params             *AuthHelperMockGenerateJWTParams
	paramPtrs          *AuthHelperMockGenerateJWTParamPtrs
	expectationOrigins AuthHelperMockGenerateJWTExpectationOrigins
	results            *AuthHelperMockGenerateJWTResults
	returnOrigin       string
	Counter            uint64
}

// AuthHelperMockGenerateJWTParams contains parameters of the AuthHelper.GenerateJWT
type AuthHelperMockGenerateJWTParams struct {
	userID     int64
	jwtSecret  []byte
	jwtTimeout int
}

// AuthHelperMockGenerateJWTParamPtrs contains pointers to parameters of the AuthHelper.GenerateJWT
type AuthHelperMockGenerateJWTParamPtrs struct {
	userID     *int64
	jwtSecret  *[]byte
	jwtTimeout *int
}

// AuthHelperMockGenerateJWTResults contains results of the AuthHelper.GenerateJWT
type AuthHelperMockGenerateJWTResults struct {
	s1  string
	err error
}

// AuthHelperMockGenerateJWTOrigins contains origins of expectations of the AuthHelper.GenerateJWT
type AuthHelperMockGenerateJWTExpectationOrigins struct {
	origin           string
	originUserID     string
	originJwtSecret  string
	originJwtTimeout string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGenerateJWT *mAuthHelperMockGenerateJWT) Optional() *mAuthHelperMockGenerateJWT {
	mmGenerateJWT.optional = true
	return mmGenerateJWT
}

// Expect sets up expected params for AuthHelper.GenerateJWT
func (mmGenerateJWT *mAuthHelperMockGenerateJWT) Expect(userID int64, jwtSecret []byte, jwtTimeout int) *mAuthHelperMockGenerateJWT {
	if mmGenerateJWT.mock.funcGenerateJWT != nil {
		mmGenerateJWT.mock.t.Fatalf("AuthHelperMock.GenerateJWT mock is already set by Set")
	}

	if mmGenerateJWT.defaultExpectation == nil {
		mmGenerateJWT.defaultExpectation = &AuthHelperMockGenerateJWTExpectation{}
	}

	if mmGenerateJWT.defaultExpectation.paramPtrs != nil {
		mmGenerateJWT.mock.t.Fatalf("AuthHelperMock.GenerateJWT mock is already set by ExpectParams functions")
	}

	mmGenerateJWT.defaultExpectation.params = &AuthHelperMockGenerateJWTParams{userID, jwtSecret, jwtTimeout}
	mmGenerateJWT.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmGenerateJWT.expectations {
		if minimock.Equal(e.params, mmGenerateJWT.defaultExpectation.params) {
			mmGenerateJWT.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGenerateJWT.defaultExpectation.params)
		}
	}

	return mmGenerateJWT
}

// ExpectUserIDParam1 sets up expected param userID for AuthHelper.GenerateJWT
func (mmGenerateJWT *mAuthHelperMockGenerateJWT) ExpectUserIDParam1(userID int64) *mAuthHelperMockGenerateJWT {
	if mmGenerateJWT.mock.funcGenerateJWT != nil {
		mmGenerateJWT.mock.t.Fatalf("AuthHelperMock.GenerateJWT mock is already set by Set")
	}

	if mmGenerateJWT.defaultExpectation == nil {
		mmGenerateJWT.defaultExpectation = &AuthHelperMockGenerateJWTExpectation{}
	}

	if mmGenerateJWT.defaultExpectation.params != nil {
		mmGenerateJWT.mock.t.Fatalf("AuthHelperMock.GenerateJWT mock is already set by Expect")
	}

	if mmGenerateJWT.defaultExpectation.paramPtrs == nil {
		mmGenerateJWT.defaultExpectation.paramPtrs = &AuthHelperMockGenerateJWTParamPtrs{}
	}
	mmGenerateJWT.defaultExpectation.paramPtrs.userID = &userID
	mmGenerateJWT.defaultExpectation.expectationOrigins.originUserID = minimock.CallerInfo(1)

	return mmGenerateJWT
}

// ExpectJwtSecretParam2 sets up expected param jwtSecret for AuthHelper.GenerateJWT
func (mmGenerateJWT *mAuthHelperMockGenerateJWT) ExpectJwtSecretParam2(jwtSecret []byte) *mAuthHelperMockGenerateJWT {
	if mmGenerateJWT.mock.funcGenerateJWT != nil {
		mmGenerateJWT.mock.t.Fatalf("AuthHelperMock.GenerateJWT mock is already set by Set")
	}

	if mmGenerateJWT.defaultExpectation == nil {
		mmGenerateJWT.defaultExpectation = &AuthHelperMockGenerateJWTExpectation{}
	}

	if mmGenerateJWT.defaultExpectation.params != nil {
		mmGenerateJWT.mock.t.Fatalf("AuthHelperMock.GenerateJWT mock is already set by Expect")
	}

	if mmGenerateJWT.defaultExpectation.paramPtrs == nil {
		mmGenerateJWT.defaultExpectation.paramPtrs = &AuthHelperMockGenerateJWTParamPtrs{}
	}
	mmGenerateJWT.defaultExpectation.paramPtrs.jwtSecret = &jwtSecret
	mmGenerateJWT.defaultExpectation.expectationOrigins.originJwtSecret = minimock.CallerInfo(1)

	return mmGenerateJWT
}

// ExpectJwtTimeoutParam3 sets up expected param jwtTimeout for AuthHelper.GenerateJWT
func (mmGenerateJWT *mAuthHelperMockGenerateJWT) ExpectJwtTimeoutParam3(jwtTimeout int) *mAuthHelperMockGenerateJWT {
	if mmGenerateJWT.mock.funcGenerateJWT != nil {
		mmGenerateJWT.mock.t.Fatalf("AuthHelperMock.GenerateJWT mock is already set by Set")
	}

	if mmGenerateJWT.defaultExpectation == nil {
		mmGenerateJWT.defaultExpectation = &AuthHelperMockGenerateJWTExpectation{}
	}

	if mmGenerateJWT.defaultExpectation.params != nil {
		mmGenerateJWT.mock.t.Fatalf("AuthHelperMock.GenerateJWT mock is already set by Expect")
	}

	if mmGenerateJWT.defaultExpectation.paramPtrs == nil {
		mmGenerateJWT.defaultExpectation.paramPtrs = &AuthHelperMockGenerateJWTParamPtrs{}
	}
	mmGenerateJWT.defaultExpectation.paramPtrs.jwtTimeout = &jwtTimeout
	mmGenerateJWT.defaultExpectation.expectationOrigins.originJwtTimeout = minimock.CallerInfo(1)

	return mmGenerateJWT
}

// Inspect accepts an inspector function that has same arguments as the AuthHelper.GenerateJWT
func (mmGenerateJWT *mAuthHelperMockGenerateJWT) Inspect(f func(userID int64, jwtSecret []byte, jwtTimeout int)) *mAuthHelperMockGenerateJWT {
	if mmGenerateJWT.mock.inspectFuncGenerateJWT != nil {
		mmGenerateJWT.mock.t.Fatalf("Inspect function is already set for AuthHelperMock.GenerateJWT")
	}

	mmGenerateJWT.mock.inspectFuncGenerateJWT = f

	return mmGenerateJWT
}

// Return sets up results that will be returned by AuthHelper.GenerateJWT
func (mmGenerateJWT *mAuthHelperMockGenerateJWT) Return(s1 string, err error) *AuthHelperMock {
	if mmGenerateJWT.mock.funcGenerateJWT != nil {
		mmGenerateJWT.mock.t.Fatalf("AuthHelperMock.GenerateJWT mock is already set by Set")
	}

	if mmGenerateJWT.defaultExpectation == nil {
		mmGenerateJWT.defaultExpectation = &AuthHelperMockGenerateJWTExpectation{mock: mmGenerateJWT.mock}
	}
	mmGenerateJWT.defaultExpectation.results = &AuthHelperMockGenerateJWTResults{s1, err}
	mmGenerateJWT.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmGenerateJWT.mock
}

// Set uses given function f to mock the AuthHelper.GenerateJWT method
func (mmGenerateJWT *mAuthHelperMockGenerateJWT) Set(f func(userID int64, jwtSecret []byte, jwtTimeout int) (s1 string, err error)) *AuthHelperMock {
	if mmGenerateJWT.defaultExpectation != nil {
		mmGenerateJWT.mock.t.Fatalf("Default expectation is already set for the AuthHelper.GenerateJWT method")
	}

	if len(mmGenerateJWT.expectations) > 0 {
		mmGenerateJWT.mock.t.Fatalf("Some expectations are already set for the AuthHelper.GenerateJWT method")
	}

	mmGenerateJWT.mock.funcGenerateJWT = f
	mmGenerateJWT.mock.funcGenerateJWTOrigin = minimock.CallerInfo(1)
	return mmGenerateJWT.mock
}

// When sets expectation for the AuthHelper.GenerateJWT which will trigger the result defined by the following
// Then helper
func (mmGenerateJWT *mAuthHelperMockGenerateJWT) When(userID int64, jwtSecret []byte, jwtTimeout int) *AuthHelperMockGenerateJWTExpectation {
	if mmGenerateJWT.mock.funcGenerateJWT != nil {
		mmGenerateJWT.mock.t.Fatalf("AuthHelperMock.GenerateJWT mock is already set by Set")
	}

	expectation := &AuthHelperMockGenerateJWTExpectation{
		mock:               mmGenerateJWT.mock,
		params:             &AuthHelperMockGenerateJWTParams{userID, jwtSecret, jwtTimeout},
		expectationOrigins: AuthHelperMockGenerateJWTExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmGenerateJWT.expectations = append(mmGenerateJWT.expectations, expectation)
	return expectation
}

// Then sets up AuthHelper.GenerateJWT return parameters for the expectation previously defined by the When method
func (e *AuthHelperMockGenerateJWTExpectation) Then(s1 string, err error) *AuthHelperMock {
	e.results = &AuthHelperMockGenerateJWTResults{s1, err}
	return e.mock
}

// Times sets number of times AuthHelper.GenerateJWT should be invoked
func (mmGenerateJWT *mAuthHelperMockGenerateJWT) Times(n uint64) *mAuthHelperMockGenerateJWT {
	if n == 0 {
		mmGenerateJWT.mock.t.Fatalf("Times of AuthHelperMock.GenerateJWT mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGenerateJWT.expectedInvocations, n)
	mmGenerateJWT.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmGenerateJWT
}

func (mmGenerateJWT *mAuthHelperMockGenerateJWT) invocationsDone() bool {
	if len(mmGenerateJWT.expectations) == 0 && mmGenerateJWT.defaultExpectation == nil && mmGenerateJWT.mock.funcGenerateJWT == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGenerateJWT.mock.afterGenerateJWTCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGenerateJWT.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// GenerateJWT implements mm_authhelper.AuthHelper
func (mmGenerateJWT *AuthHelperMock) GenerateJWT(userID int64, jwtSecret []byte, jwtTimeout int) (s1 string, err error) {
	mm_atomic.AddUint64(&mmGenerateJWT.beforeGenerateJWTCounter, 1)
	defer mm_atomic.AddUint64(&mmGenerateJWT.afterGenerateJWTCounter, 1)

	mmGenerateJWT.t.Helper()

	if mmGenerateJWT.inspectFuncGenerateJWT != nil {
		mmGenerateJWT.inspectFuncGenerateJWT(userID, jwtSecret, jwtTimeout)
	}

	mm_params := AuthHelperMockGenerateJWTParams{userID, jwtSecret, jwtTimeout}

	// Record call args
	mmGenerateJWT.GenerateJWTMock.mutex.Lock()
	mmGenerateJWT.GenerateJWTMock.callArgs = append(mmGenerateJWT.GenerateJWTMock.callArgs, &mm_params)
	mmGenerateJWT.GenerateJWTMock.mutex.Unlock()

	for _, e := range mmGenerateJWT.GenerateJWTMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.s1, e.results.err
		}
	}

	if mmGenerateJWT.GenerateJWTMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGenerateJWT.GenerateJWTMock.defaultExpectation.Counter, 1)
		mm_want := mmGenerateJWT.GenerateJWTMock.defaultExpectation.params
		mm_want_ptrs := mmGenerateJWT.GenerateJWTMock.defaultExpectation.paramPtrs

		mm_got := AuthHelperMockGenerateJWTParams{userID, jwtSecret, jwtTimeout}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.userID != nil && !minimock.Equal(*mm_want_ptrs.userID, mm_got.userID) {
				mmGenerateJWT.t.Errorf("AuthHelperMock.GenerateJWT got unexpected parameter userID, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGenerateJWT.GenerateJWTMock.defaultExpectation.expectationOrigins.originUserID, *mm_want_ptrs.userID, mm_got.userID, minimock.Diff(*mm_want_ptrs.userID, mm_got.userID))
			}

			if mm_want_ptrs.jwtSecret != nil && !minimock.Equal(*mm_want_ptrs.jwtSecret, mm_got.jwtSecret) {
				mmGenerateJWT.t.Errorf("AuthHelperMock.GenerateJWT got unexpected parameter jwtSecret, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGenerateJWT.GenerateJWTMock.defaultExpectation.expectationOrigins.originJwtSecret, *mm_want_ptrs.jwtSecret, mm_got.jwtSecret, minimock.Diff(*mm_want_ptrs.jwtSecret, mm_got.jwtSecret))
			}

			if mm_want_ptrs.jwtTimeout != nil && !minimock.Equal(*mm_want_ptrs.jwtTimeout, mm_got.jwtTimeout) {
				mmGenerateJWT.t.Errorf("AuthHelperMock.GenerateJWT got unexpected parameter jwtTimeout, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGenerateJWT.GenerateJWTMock.defaultExpectation.expectationOrigins.originJwtTimeout, *mm_want_ptrs.jwtTimeout, mm_got.jwtTimeout, minimock.Diff(*mm_want_ptrs.jwtTimeout, mm_got.jwtTimeout))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGenerateJWT.t.Errorf("AuthHelperMock.GenerateJWT got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmGenerateJWT.GenerateJWTMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGenerateJWT.GenerateJWTMock.defaultExpectation.results
		if mm_results == nil {
			mmGenerateJWT.t.Fatal("No results are set for the AuthHelperMock.GenerateJWT")
		}
		return (*mm_results).s1, (*mm_results).err
	}
	if mmGenerateJWT.funcGenerateJWT != nil {
		return mmGenerateJWT.funcGenerateJWT(userID, jwtSecret, jwtTimeout)
	}
	mmGenerateJWT.t.Fatalf("Unexpected call to AuthHelperMock.GenerateJWT. %v %v %v", userID, jwtSecret, jwtTimeout)
	return
}

// GenerateJWTAfterCounter returns a count of finished AuthHelperMock.GenerateJWT invocations
func (mmGenerateJWT *AuthHelperMock) GenerateJWTAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGenerateJWT.afterGenerateJWTCounter)
}

// GenerateJWTBeforeCounter returns a count of AuthHelperMock.GenerateJWT invocations
func (mmGenerateJWT *AuthHelperMock) GenerateJWTBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGenerateJWT.beforeGenerateJWTCounter)
}

// Calls returns a list of arguments used in each call to AuthHelperMock.GenerateJWT.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGenerateJWT *mAuthHelperMockGenerateJWT) Calls() []*AuthHelperMockGenerateJWTParams {
	mmGenerateJWT.mutex.RLock()

	argCopy := make([]*AuthHelperMockGenerateJWTParams, len(mmGenerateJWT.callArgs))
	copy(argCopy, mmGenerateJWT.callArgs)

	mmGenerateJWT.mutex.RUnlock()

	return argCopy
}

// MinimockGenerateJWTDone returns true if the count of the GenerateJWT invocations corresponds
// the number of defined expectations
func (m *AuthHelperMock) MinimockGenerateJWTDone() bool {
	if m.GenerateJWTMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GenerateJWTMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GenerateJWTMock.invocationsDone()
}

// MinimockGenerateJWTInspect logs each unmet expectation
func (m *AuthHelperMock) MinimockGenerateJWTInspect() {
	for _, e := range m.GenerateJWTMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to AuthHelperMock.GenerateJWT at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterGenerateJWTCounter := mm_atomic.LoadUint64(&m.afterGenerateJWTCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GenerateJWTMock.defaultExpectation != nil && afterGenerateJWTCounter < 1 {
		if m.GenerateJWTMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to AuthHelperMock.GenerateJWT at\n%s", m.GenerateJWTMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to AuthHelperMock.GenerateJWT at\n%s with params: %#v", m.GenerateJWTMock.defaultExpectation.expectationOrigins.origin, *m.GenerateJWTMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGenerateJWT != nil && afterGenerateJWTCounter < 1 {
		m.t.Errorf("Expected call to AuthHelperMock.GenerateJWT at\n%s", m.funcGenerateJWTOrigin)
	}

	if !m.GenerateJWTMock.invocationsDone() && afterGenerateJWTCounter > 0 {
		m.t.Errorf("Expected %d calls to AuthHelperMock.GenerateJWT at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.GenerateJWTMock.expectedInvocations), m.GenerateJWTMock.expectedInvocationsOrigin, afterGenerateJWTCounter)
	}
}

type mAuthHelperMockVerifyPassword struct {
	optional           bool
	mock               *AuthHelperMock
	defaultExpectation *AuthHelperMockVerifyPasswordExpectation
	expectations       []*AuthHelperMockVerifyPasswordExpectation

	callArgs []*AuthHelperMockVerifyPasswordParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// AuthHelperMockVerifyPasswordExpectation specifies expectation struct of the AuthHelper.VerifyPassword
type AuthHelperMockVerifyPasswordExpectation struct {
	mock               *AuthHelperMock
	params             *AuthHelperMockVerifyPasswordParams
	paramPtrs          *AuthHelperMockVerifyPasswordParamPtrs
	expectationOrigins AuthHelperMockVerifyPasswordExpectationOrigins
	results            *AuthHelperMockVerifyPasswordResults
	returnOrigin       string
	Counter            uint64
}

// AuthHelperMockVerifyPasswordParams contains parameters of the AuthHelper.VerifyPassword
type AuthHelperMockVerifyPasswordParams struct {
	hashedPassword    string
	candidatePassword string
}

// AuthHelperMockVerifyPasswordParamPtrs contains pointers to parameters of the AuthHelper.VerifyPassword
type AuthHelperMockVerifyPasswordParamPtrs struct {
	hashedPassword    *string
	candidatePassword *string
}

// AuthHelperMockVerifyPasswordResults contains results of the AuthHelper.VerifyPassword
type AuthHelperMockVerifyPasswordResults struct {
	b1 bool
}

// AuthHelperMockVerifyPasswordOrigins contains origins of expectations of the AuthHelper.VerifyPassword
type AuthHelperMockVerifyPasswordExpectationOrigins struct {
	origin                  string
	originHashedPassword    string
	originCandidatePassword string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmVerifyPassword *mAuthHelperMockVerifyPassword) Optional() *mAuthHelperMockVerifyPassword {
	mmVerifyPassword.optional = true
	return mmVerifyPassword
}

// Expect sets up expected params for AuthHelper.VerifyPassword
func (mmVerifyPassword *mAuthHelperMockVerifyPassword) Expect(hashedPassword string, candidatePassword string) *mAuthHelperMockVerifyPassword {
	if mmVerifyPassword.mock.funcVerifyPassword != nil {
		mmVerifyPassword.mock.t.Fatalf("AuthHelperMock.VerifyPassword mock is already set by Set")
	}

	if mmVerifyPassword.defaultExpectation == nil {
		mmVerifyPassword.defaultExpectation = &AuthHelperMockVerifyPasswordExpectation{}
	}

	if mmVerifyPassword.defaultExpectation.paramPtrs != nil {
		mmVerifyPassword.mock.t.Fatalf("AuthHelperMock.VerifyPassword mock is already set by ExpectParams functions")
	}

	mmVerifyPassword.defaultExpectation.params = &AuthHelperMockVerifyPasswordParams{hashedPassword, candidatePassword}
	mmVerifyPassword.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmVerifyPassword.expectations {
		if minimock.Equal(e.params, mmVerifyPassword.defaultExpectation.params) {
			mmVerifyPassword.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmVerifyPassword.defaultExpectation.params)
		}
	}

	return mmVerifyPassword
}

// ExpectHashedPasswordParam1 sets up expected param hashedPassword for AuthHelper.VerifyPassword
func (mmVerifyPassword *mAuthHelperMockVerifyPassword) ExpectHashedPasswordParam1(hashedPassword string) *mAuthHelperMockVerifyPassword {
	if mmVerifyPassword.mock.funcVerifyPassword != nil {
		mmVerifyPassword.mock.t.Fatalf("AuthHelperMock.VerifyPassword mock is already set by Set")
	}

	if mmVerifyPassword.defaultExpectation == nil {
		mmVerifyPassword.defaultExpectation = &AuthHelperMockVerifyPasswordExpectation{}
	}

	if mmVerifyPassword.defaultExpectation.params != nil {
		mmVerifyPassword.mock.t.Fatalf("AuthHelperMock.VerifyPassword mock is already set by Expect")
	}

	if mmVerifyPassword.defaultExpectation.paramPtrs == nil {
		mmVerifyPassword.defaultExpectation.paramPtrs = &AuthHelperMockVerifyPasswordParamPtrs{}
	}
	mmVerifyPassword.defaultExpectation.paramPtrs.hashedPassword = &hashedPassword
	mmVerifyPassword.defaultExpectation.expectationOrigins.originHashedPassword = minimock.CallerInfo(1)

	return mmVerifyPassword
}

// ExpectCandidatePasswordParam2 sets up expected param candidatePassword for AuthHelper.VerifyPassword
func (mmVerifyPassword *mAuthHelperMockVerifyPassword) ExpectCandidatePasswordParam2(candidatePassword string) *mAuthHelperMockVerifyPassword {
	if mmVerifyPassword.mock.funcVerifyPassword != nil {
		mmVerifyPassword.mock.t.Fatalf("AuthHelperMock.VerifyPassword mock is already set by Set")
	}

	if mmVerifyPassword.defaultExpectation == nil {
		mmVerifyPassword.defaultExpectation = &AuthHelperMockVerifyPasswordExpectation{}
	}

	if mmVerifyPassword.defaultExpectation.params != nil {
		mmVerifyPassword.mock.t.Fatalf("AuthHelperMock.VerifyPassword mock is already set by Expect")
	}

	if mmVerifyPassword.defaultExpectation.paramPtrs == nil {
		mmVerifyPassword.defaultExpectation.paramPtrs = &AuthHelperMockVerifyPasswordParamPtrs{}
	}
	mmVerifyPassword.defaultExpectation.paramPtrs.candidatePassword = &candidatePassword
	mmVerifyPassword.defaultExpectation.expectationOrigins.originCandidatePassword = minimock.CallerInfo(1)

	return mmVerifyPassword
}

// Inspect accepts an inspector function that has same arguments as the AuthHelper.VerifyPassword
func (mmVerifyPassword *mAuthHelperMockVerifyPassword) Inspect(f func(hashedPassword string, candidatePassword string)) *mAuthHelperMockVerifyPassword {
	if mmVerifyPassword.mock.inspectFuncVerifyPassword != nil {
		mmVerifyPassword.mock.t.Fatalf("Inspect function is already set for AuthHelperMock.VerifyPassword")
	}

	mmVerifyPassword.mock.inspectFuncVerifyPassword = f

	return mmVerifyPassword
}

// Return sets up results that will be returned by AuthHelper.VerifyPassword
func (mmVerifyPassword *mAuthHelperMockVerifyPassword) Return(b1 bool) *AuthHelperMock {
	if mmVerifyPassword.mock.funcVerifyPassword != nil {
		mmVerifyPassword.mock.t.Fatalf("AuthHelperMock.VerifyPassword mock is already set by Set")
	}

	if mmVerifyPassword.defaultExpectation == nil {
		mmVerifyPassword.defaultExpectation = &AuthHelperMockVerifyPasswordExpectation{mock: mmVerifyPassword.mock}
	}
	mmVerifyPassword.defaultExpectation.results = &AuthHelperMockVerifyPasswordResults{b1}
	mmVerifyPassword.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmVerifyPassword.mock
}

// Set uses given function f to mock the AuthHelper.VerifyPassword method
func (mmVerifyPassword *mAuthHelperMockVerifyPassword) Set(f func(hashedPassword string, candidatePassword string) (b1 bool)) *AuthHelperMock {
	if mmVerifyPassword.defaultExpectation != nil {
		mmVerifyPassword.mock.t.Fatalf("Default expectation is already set for the AuthHelper.VerifyPassword method")
	}

	if len(mmVerifyPassword.expectations) > 0 {
		mmVerifyPassword.mock.t.Fatalf("Some expectations are already set for the AuthHelper.VerifyPassword method")
	}

	mmVerifyPassword.mock.funcVerifyPassword = f
	mmVerifyPassword.mock.funcVerifyPasswordOrigin = minimock.CallerInfo(1)
	return mmVerifyPassword.mock
}

// When sets expectation for the AuthHelper.VerifyPassword which will trigger the result defined by the following
// Then helper
func (mmVerifyPassword *mAuthHelperMockVerifyPassword) When(hashedPassword string, candidatePassword string) *AuthHelperMockVerifyPasswordExpectation {
	if mmVerifyPassword.mock.funcVerifyPassword != nil {
		mmVerifyPassword.mock.t.Fatalf("AuthHelperMock.VerifyPassword mock is already set by Set")
	}

	expectation := &AuthHelperMockVerifyPasswordExpectation{
		mock:               mmVerifyPassword.mock,
		params:             &AuthHelperMockVerifyPasswordParams{hashedPassword, candidatePassword},
		expectationOrigins: AuthHelperMockVerifyPasswordExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmVerifyPassword.expectations = append(mmVerifyPassword.expectations, expectation)
	return expectation
}

// Then sets up AuthHelper.VerifyPassword return parameters for the expectation previously defined by the When method
func (e *AuthHelperMockVerifyPasswordExpectation) Then(b1 bool) *AuthHelperMock {
	e.results = &AuthHelperMockVerifyPasswordResults{b1}
	return e.mock
}

// Times sets number of times AuthHelper.VerifyPassword should be invoked
func (mmVerifyPassword *mAuthHelperMockVerifyPassword) Times(n uint64) *mAuthHelperMockVerifyPassword {
	if n == 0 {
		mmVerifyPassword.mock.t.Fatalf("Times of AuthHelperMock.VerifyPassword mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmVerifyPassword.expectedInvocations, n)
	mmVerifyPassword.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmVerifyPassword
}

func (mmVerifyPassword *mAuthHelperMockVerifyPassword) invocationsDone() bool {
	if len(mmVerifyPassword.expectations) == 0 && mmVerifyPassword.defaultExpectation == nil && mmVerifyPassword.mock.funcVerifyPassword == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmVerifyPassword.mock.afterVerifyPasswordCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmVerifyPassword.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// VerifyPassword implements mm_authhelper.AuthHelper
func (mmVerifyPassword *AuthHelperMock) VerifyPassword(hashedPassword string, candidatePassword string) (b1 bool) {
	mm_atomic.AddUint64(&mmVerifyPassword.beforeVerifyPasswordCounter, 1)
	defer mm_atomic.AddUint64(&mmVerifyPassword.afterVerifyPasswordCounter, 1)

	mmVerifyPassword.t.Helper()

	if mmVerifyPassword.inspectFuncVerifyPassword != nil {
		mmVerifyPassword.inspectFuncVerifyPassword(hashedPassword, candidatePassword)
	}

	mm_params := AuthHelperMockVerifyPasswordParams{hashedPassword, candidatePassword}

	// Record call args
	mmVerifyPassword.VerifyPasswordMock.mutex.Lock()
	mmVerifyPassword.VerifyPasswordMock.callArgs = append(mmVerifyPassword.VerifyPasswordMock.callArgs, &mm_params)
	mmVerifyPassword.VerifyPasswordMock.mutex.Unlock()

	for _, e := range mmVerifyPassword.VerifyPasswordMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.b1
		}
	}

	if mmVerifyPassword.VerifyPasswordMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmVerifyPassword.VerifyPasswordMock.defaultExpectation.Counter, 1)
		mm_want := mmVerifyPassword.VerifyPasswordMock.defaultExpectation.params
		mm_want_ptrs := mmVerifyPassword.VerifyPasswordMock.defaultExpectation.paramPtrs

		mm_got := AuthHelperMockVerifyPasswordParams{hashedPassword, candidatePassword}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.hashedPassword != nil && !minimock.Equal(*mm_want_ptrs.hashedPassword, mm_got.hashedPassword) {
				mmVerifyPassword.t.Errorf("AuthHelperMock.VerifyPassword got unexpected parameter hashedPassword, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmVerifyPassword.VerifyPasswordMock.defaultExpectation.expectationOrigins.originHashedPassword, *mm_want_ptrs.hashedPassword, mm_got.hashedPassword, minimock.Diff(*mm_want_ptrs.hashedPassword, mm_got.hashedPassword))
			}

			if mm_want_ptrs.candidatePassword != nil && !minimock.Equal(*mm_want_ptrs.candidatePassword, mm_got.candidatePassword) {
				mmVerifyPassword.t.Errorf("AuthHelperMock.VerifyPassword got unexpected parameter candidatePassword, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmVerifyPassword.VerifyPasswordMock.defaultExpectation.expectationOrigins.originCandidatePassword, *mm_want_ptrs.candidatePassword, mm_got.candidatePassword, minimock.Diff(*mm_want_ptrs.candidatePassword, mm_got.candidatePassword))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmVerifyPassword.t.Errorf("AuthHelperMock.VerifyPassword got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmVerifyPassword.VerifyPasswordMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmVerifyPassword.VerifyPasswordMock.defaultExpectation.results
		if mm_results == nil {
			mmVerifyPassword.t.Fatal("No results are set for the AuthHelperMock.VerifyPassword")
		}
		return (*mm_results).b1
	}
	if mmVerifyPassword.funcVerifyPassword != nil {
		return mmVerifyPassword.funcVerifyPassword(hashedPassword, candidatePassword)
	}
	mmVerifyPassword.t.Fatalf("Unexpected call to AuthHelperMock.VerifyPassword. %v %v", hashedPassword, candidatePassword)
	return
}

// VerifyPasswordAfterCounter returns a count of finished AuthHelperMock.VerifyPassword invocations
func (mmVerifyPassword *AuthHelperMock) VerifyPasswordAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmVerifyPassword.afterVerifyPasswordCounter)
}

// VerifyPasswordBeforeCounter returns a count of AuthHelperMock.VerifyPassword invocations
func (mmVerifyPassword *AuthHelperMock) VerifyPasswordBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmVerifyPassword.beforeVerifyPasswordCounter)
}

// Calls returns a list of arguments used in each call to AuthHelperMock.VerifyPassword.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmVerifyPassword *mAuthHelperMockVerifyPassword) Calls() []*AuthHelperMockVerifyPasswordParams {
	mmVerifyPassword.mutex.RLock()

	argCopy := make([]*AuthHelperMockVerifyPasswordParams, len(mmVerifyPassword.callArgs))
	copy(argCopy, mmVerifyPassword.callArgs)

	mmVerifyPassword.mutex.RUnlock()

	return argCopy
}

// MinimockVerifyPasswordDone returns true if the count of the VerifyPassword invocations corresponds
// the number of defined expectations
func (m *AuthHelperMock) MinimockVerifyPasswordDone() bool {
	if m.VerifyPasswordMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.VerifyPasswordMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.VerifyPasswordMock.invocationsDone()
}

// MinimockVerifyPasswordInspect logs each unmet expectation
func (m *AuthHelperMock) MinimockVerifyPasswordInspect() {
	for _, e := range m.VerifyPasswordMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to AuthHelperMock.VerifyPassword at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterVerifyPasswordCounter := mm_atomic.LoadUint64(&m.afterVerifyPasswordCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.VerifyPasswordMock.defaultExpectation != nil && afterVerifyPasswordCounter < 1 {
		if m.VerifyPasswordMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to AuthHelperMock.VerifyPassword at\n%s", m.VerifyPasswordMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to AuthHelperMock.VerifyPassword at\n%s with params: %#v", m.VerifyPasswordMock.defaultExpectation.expectationOrigins.origin, *m.VerifyPasswordMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcVerifyPassword != nil && afterVerifyPasswordCounter < 1 {
		m.t.Errorf("Expected call to AuthHelperMock.VerifyPassword at\n%s", m.funcVerifyPasswordOrigin)
	}

	if !m.VerifyPasswordMock.invocationsDone() && afterVerifyPasswordCounter > 0 {
		m.t.Errorf("Expected %d calls to AuthHelperMock.VerifyPassword at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.VerifyPasswordMock.expectedInvocations), m.VerifyPasswordMock.expectedInvocationsOrigin, afterVerifyPasswordCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *AuthHelperMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockGenerateJWTInspect()

			m.MinimockVerifyPasswordInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *AuthHelperMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *AuthHelperMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGenerateJWTDone() &&
		m.MinimockVerifyPasswordDone()
}
