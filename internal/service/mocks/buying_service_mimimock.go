// Code generated by http://github.com/gojuno/minimock (v3.4.5). DO NOT EDIT.

package mocks

//go:generate minimock -i github.com/Krab1o/avito-backend-assignment-2025/internal/service.BuyingService -o buying_service_mimimock.go -n BuyingServiceMock -p mocks

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	buyingModel "github.com/Krab1o/avito-backend-assignment-2025/internal/service/buying/model"
	"github.com/gojuno/minimock/v3"
)

// BuyingServiceMock implements mm_service.BuyingService
type BuyingServiceMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcBuy          func(ctx context.Context, bp1 *buyingModel.Buying) (err error)
	funcBuyOrigin    string
	inspectFuncBuy   func(ctx context.Context, bp1 *buyingModel.Buying)
	afterBuyCounter  uint64
	beforeBuyCounter uint64
	BuyMock          mBuyingServiceMockBuy
}

// NewBuyingServiceMock returns a mock for mm_service.BuyingService
func NewBuyingServiceMock(t minimock.Tester) *BuyingServiceMock {
	m := &BuyingServiceMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.BuyMock = mBuyingServiceMockBuy{mock: m}
	m.BuyMock.callArgs = []*BuyingServiceMockBuyParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mBuyingServiceMockBuy struct {
	optional           bool
	mock               *BuyingServiceMock
	defaultExpectation *BuyingServiceMockBuyExpectation
	expectations       []*BuyingServiceMockBuyExpectation

	callArgs []*BuyingServiceMockBuyParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// BuyingServiceMockBuyExpectation specifies expectation struct of the BuyingService.Buy
type BuyingServiceMockBuyExpectation struct {
	mock               *BuyingServiceMock
	params             *BuyingServiceMockBuyParams
	paramPtrs          *BuyingServiceMockBuyParamPtrs
	expectationOrigins BuyingServiceMockBuyExpectationOrigins
	results            *BuyingServiceMockBuyResults
	returnOrigin       string
	Counter            uint64
}

// BuyingServiceMockBuyParams contains parameters of the BuyingService.Buy
type BuyingServiceMockBuyParams struct {
	ctx context.Context
	bp1 *buyingModel.Buying
}

// BuyingServiceMockBuyParamPtrs contains pointers to parameters of the BuyingService.Buy
type BuyingServiceMockBuyParamPtrs struct {
	ctx *context.Context
	bp1 **buyingModel.Buying
}

// BuyingServiceMockBuyResults contains results of the BuyingService.Buy
type BuyingServiceMockBuyResults struct {
	err error
}

// BuyingServiceMockBuyOrigins contains origins of expectations of the BuyingService.Buy
type BuyingServiceMockBuyExpectationOrigins struct {
	origin    string
	originCtx string
	originBp1 string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmBuy *mBuyingServiceMockBuy) Optional() *mBuyingServiceMockBuy {
	mmBuy.optional = true
	return mmBuy
}

// Expect sets up expected params for BuyingService.Buy
func (mmBuy *mBuyingServiceMockBuy) Expect(ctx context.Context, bp1 *buyingModel.Buying) *mBuyingServiceMockBuy {
	if mmBuy.mock.funcBuy != nil {
		mmBuy.mock.t.Fatalf("BuyingServiceMock.Buy mock is already set by Set")
	}

	if mmBuy.defaultExpectation == nil {
		mmBuy.defaultExpectation = &BuyingServiceMockBuyExpectation{}
	}

	if mmBuy.defaultExpectation.paramPtrs != nil {
		mmBuy.mock.t.Fatalf("BuyingServiceMock.Buy mock is already set by ExpectParams functions")
	}

	mmBuy.defaultExpectation.params = &BuyingServiceMockBuyParams{ctx, bp1}
	mmBuy.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmBuy.expectations {
		if minimock.Equal(e.params, mmBuy.defaultExpectation.params) {
			mmBuy.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmBuy.defaultExpectation.params)
		}
	}

	return mmBuy
}

// ExpectCtxParam1 sets up expected param ctx for BuyingService.Buy
func (mmBuy *mBuyingServiceMockBuy) ExpectCtxParam1(ctx context.Context) *mBuyingServiceMockBuy {
	if mmBuy.mock.funcBuy != nil {
		mmBuy.mock.t.Fatalf("BuyingServiceMock.Buy mock is already set by Set")
	}

	if mmBuy.defaultExpectation == nil {
		mmBuy.defaultExpectation = &BuyingServiceMockBuyExpectation{}
	}

	if mmBuy.defaultExpectation.params != nil {
		mmBuy.mock.t.Fatalf("BuyingServiceMock.Buy mock is already set by Expect")
	}

	if mmBuy.defaultExpectation.paramPtrs == nil {
		mmBuy.defaultExpectation.paramPtrs = &BuyingServiceMockBuyParamPtrs{}
	}
	mmBuy.defaultExpectation.paramPtrs.ctx = &ctx
	mmBuy.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmBuy
}

// ExpectBp1Param2 sets up expected param bp1 for BuyingService.Buy
func (mmBuy *mBuyingServiceMockBuy) ExpectBp1Param2(bp1 *buyingModel.Buying) *mBuyingServiceMockBuy {
	if mmBuy.mock.funcBuy != nil {
		mmBuy.mock.t.Fatalf("BuyingServiceMock.Buy mock is already set by Set")
	}

	if mmBuy.defaultExpectation == nil {
		mmBuy.defaultExpectation = &BuyingServiceMockBuyExpectation{}
	}

	if mmBuy.defaultExpectation.params != nil {
		mmBuy.mock.t.Fatalf("BuyingServiceMock.Buy mock is already set by Expect")
	}

	if mmBuy.defaultExpectation.paramPtrs == nil {
		mmBuy.defaultExpectation.paramPtrs = &BuyingServiceMockBuyParamPtrs{}
	}
	mmBuy.defaultExpectation.paramPtrs.bp1 = &bp1
	mmBuy.defaultExpectation.expectationOrigins.originBp1 = minimock.CallerInfo(1)

	return mmBuy
}

// Inspect accepts an inspector function that has same arguments as the BuyingService.Buy
func (mmBuy *mBuyingServiceMockBuy) Inspect(f func(ctx context.Context, bp1 *buyingModel.Buying)) *mBuyingServiceMockBuy {
	if mmBuy.mock.inspectFuncBuy != nil {
		mmBuy.mock.t.Fatalf("Inspect function is already set for BuyingServiceMock.Buy")
	}

	mmBuy.mock.inspectFuncBuy = f

	return mmBuy
}

// Return sets up results that will be returned by BuyingService.Buy
func (mmBuy *mBuyingServiceMockBuy) Return(err error) *BuyingServiceMock {
	if mmBuy.mock.funcBuy != nil {
		mmBuy.mock.t.Fatalf("BuyingServiceMock.Buy mock is already set by Set")
	}

	if mmBuy.defaultExpectation == nil {
		mmBuy.defaultExpectation = &BuyingServiceMockBuyExpectation{mock: mmBuy.mock}
	}
	mmBuy.defaultExpectation.results = &BuyingServiceMockBuyResults{err}
	mmBuy.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmBuy.mock
}

// Set uses given function f to mock the BuyingService.Buy method
func (mmBuy *mBuyingServiceMockBuy) Set(f func(ctx context.Context, bp1 *buyingModel.Buying) (err error)) *BuyingServiceMock {
	if mmBuy.defaultExpectation != nil {
		mmBuy.mock.t.Fatalf("Default expectation is already set for the BuyingService.Buy method")
	}

	if len(mmBuy.expectations) > 0 {
		mmBuy.mock.t.Fatalf("Some expectations are already set for the BuyingService.Buy method")
	}

	mmBuy.mock.funcBuy = f
	mmBuy.mock.funcBuyOrigin = minimock.CallerInfo(1)
	return mmBuy.mock
}

// When sets expectation for the BuyingService.Buy which will trigger the result defined by the following
// Then helper
func (mmBuy *mBuyingServiceMockBuy) When(ctx context.Context, bp1 *buyingModel.Buying) *BuyingServiceMockBuyExpectation {
	if mmBuy.mock.funcBuy != nil {
		mmBuy.mock.t.Fatalf("BuyingServiceMock.Buy mock is already set by Set")
	}

	expectation := &BuyingServiceMockBuyExpectation{
		mock:               mmBuy.mock,
		params:             &BuyingServiceMockBuyParams{ctx, bp1},
		expectationOrigins: BuyingServiceMockBuyExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmBuy.expectations = append(mmBuy.expectations, expectation)
	return expectation
}

// Then sets up BuyingService.Buy return parameters for the expectation previously defined by the When method
func (e *BuyingServiceMockBuyExpectation) Then(err error) *BuyingServiceMock {
	e.results = &BuyingServiceMockBuyResults{err}
	return e.mock
}

// Times sets number of times BuyingService.Buy should be invoked
func (mmBuy *mBuyingServiceMockBuy) Times(n uint64) *mBuyingServiceMockBuy {
	if n == 0 {
		mmBuy.mock.t.Fatalf("Times of BuyingServiceMock.Buy mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmBuy.expectedInvocations, n)
	mmBuy.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmBuy
}

func (mmBuy *mBuyingServiceMockBuy) invocationsDone() bool {
	if len(mmBuy.expectations) == 0 && mmBuy.defaultExpectation == nil && mmBuy.mock.funcBuy == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmBuy.mock.afterBuyCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmBuy.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Buy implements mm_service.BuyingService
func (mmBuy *BuyingServiceMock) Buy(ctx context.Context, bp1 *buyingModel.Buying) (err error) {
	mm_atomic.AddUint64(&mmBuy.beforeBuyCounter, 1)
	defer mm_atomic.AddUint64(&mmBuy.afterBuyCounter, 1)

	mmBuy.t.Helper()

	if mmBuy.inspectFuncBuy != nil {
		mmBuy.inspectFuncBuy(ctx, bp1)
	}

	mm_params := BuyingServiceMockBuyParams{ctx, bp1}

	// Record call args
	mmBuy.BuyMock.mutex.Lock()
	mmBuy.BuyMock.callArgs = append(mmBuy.BuyMock.callArgs, &mm_params)
	mmBuy.BuyMock.mutex.Unlock()

	for _, e := range mmBuy.BuyMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmBuy.BuyMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmBuy.BuyMock.defaultExpectation.Counter, 1)
		mm_want := mmBuy.BuyMock.defaultExpectation.params
		mm_want_ptrs := mmBuy.BuyMock.defaultExpectation.paramPtrs

		mm_got := BuyingServiceMockBuyParams{ctx, bp1}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmBuy.t.Errorf("BuyingServiceMock.Buy got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmBuy.BuyMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.bp1 != nil && !minimock.Equal(*mm_want_ptrs.bp1, mm_got.bp1) {
				mmBuy.t.Errorf("BuyingServiceMock.Buy got unexpected parameter bp1, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmBuy.BuyMock.defaultExpectation.expectationOrigins.originBp1, *mm_want_ptrs.bp1, mm_got.bp1, minimock.Diff(*mm_want_ptrs.bp1, mm_got.bp1))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmBuy.t.Errorf("BuyingServiceMock.Buy got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmBuy.BuyMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmBuy.BuyMock.defaultExpectation.results
		if mm_results == nil {
			mmBuy.t.Fatal("No results are set for the BuyingServiceMock.Buy")
		}
		return (*mm_results).err
	}
	if mmBuy.funcBuy != nil {
		return mmBuy.funcBuy(ctx, bp1)
	}
	mmBuy.t.Fatalf("Unexpected call to BuyingServiceMock.Buy. %v %v", ctx, bp1)
	return
}

// BuyAfterCounter returns a count of finished BuyingServiceMock.Buy invocations
func (mmBuy *BuyingServiceMock) BuyAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmBuy.afterBuyCounter)
}

// BuyBeforeCounter returns a count of BuyingServiceMock.Buy invocations
func (mmBuy *BuyingServiceMock) BuyBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmBuy.beforeBuyCounter)
}

// Calls returns a list of arguments used in each call to BuyingServiceMock.Buy.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmBuy *mBuyingServiceMockBuy) Calls() []*BuyingServiceMockBuyParams {
	mmBuy.mutex.RLock()

	argCopy := make([]*BuyingServiceMockBuyParams, len(mmBuy.callArgs))
	copy(argCopy, mmBuy.callArgs)

	mmBuy.mutex.RUnlock()

	return argCopy
}

// MinimockBuyDone returns true if the count of the Buy invocations corresponds
// the number of defined expectations
func (m *BuyingServiceMock) MinimockBuyDone() bool {
	if m.BuyMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.BuyMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.BuyMock.invocationsDone()
}

// MinimockBuyInspect logs each unmet expectation
func (m *BuyingServiceMock) MinimockBuyInspect() {
	for _, e := range m.BuyMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to BuyingServiceMock.Buy at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterBuyCounter := mm_atomic.LoadUint64(&m.afterBuyCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.BuyMock.defaultExpectation != nil && afterBuyCounter < 1 {
		if m.BuyMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to BuyingServiceMock.Buy at\n%s", m.BuyMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to BuyingServiceMock.Buy at\n%s with params: %#v", m.BuyMock.defaultExpectation.expectationOrigins.origin, *m.BuyMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcBuy != nil && afterBuyCounter < 1 {
		m.t.Errorf("Expected call to BuyingServiceMock.Buy at\n%s", m.funcBuyOrigin)
	}

	if !m.BuyMock.invocationsDone() && afterBuyCounter > 0 {
		m.t.Errorf("Expected %d calls to BuyingServiceMock.Buy at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.BuyMock.expectedInvocations), m.BuyMock.expectedInvocationsOrigin, afterBuyCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *BuyingServiceMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockBuyInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *BuyingServiceMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *BuyingServiceMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockBuyDone()
}
