// Code generated by http://github.com/gojuno/minimock (v3.4.5). DO NOT EDIT.

package mocks

//go:generate minimock -i github.com/Krab1o/avito-backend-assignment-2025/internal/service.AuthService -o auth_service_mimimock.go -n AuthServiceMock -p mocks

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	userModel "github.com/Krab1o/avito-backend-assignment-2025/internal/service/auth/model"
	"github.com/gojuno/minimock/v3"
)

// AuthServiceMock implements mm_service.AuthService
type AuthServiceMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcAuth          func(ctx context.Context, up1 *userModel.UserCreds) (s1 string, err error)
	funcAuthOrigin    string
	inspectFuncAuth   func(ctx context.Context, up1 *userModel.UserCreds)
	afterAuthCounter  uint64
	beforeAuthCounter uint64
	AuthMock          mAuthServiceMockAuth
}

// NewAuthServiceMock returns a mock for mm_service.AuthService
func NewAuthServiceMock(t minimock.Tester) *AuthServiceMock {
	m := &AuthServiceMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.AuthMock = mAuthServiceMockAuth{mock: m}
	m.AuthMock.callArgs = []*AuthServiceMockAuthParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mAuthServiceMockAuth struct {
	optional           bool
	mock               *AuthServiceMock
	defaultExpectation *AuthServiceMockAuthExpectation
	expectations       []*AuthServiceMockAuthExpectation

	callArgs []*AuthServiceMockAuthParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// AuthServiceMockAuthExpectation specifies expectation struct of the AuthService.Auth
type AuthServiceMockAuthExpectation struct {
	mock               *AuthServiceMock
	params             *AuthServiceMockAuthParams
	paramPtrs          *AuthServiceMockAuthParamPtrs
	expectationOrigins AuthServiceMockAuthExpectationOrigins
	results            *AuthServiceMockAuthResults
	returnOrigin       string
	Counter            uint64
}

// AuthServiceMockAuthParams contains parameters of the AuthService.Auth
type AuthServiceMockAuthParams struct {
	ctx context.Context
	up1 *userModel.UserCreds
}

// AuthServiceMockAuthParamPtrs contains pointers to parameters of the AuthService.Auth
type AuthServiceMockAuthParamPtrs struct {
	ctx *context.Context
	up1 **userModel.UserCreds
}

// AuthServiceMockAuthResults contains results of the AuthService.Auth
type AuthServiceMockAuthResults struct {
	s1  string
	err error
}

// AuthServiceMockAuthOrigins contains origins of expectations of the AuthService.Auth
type AuthServiceMockAuthExpectationOrigins struct {
	origin    string
	originCtx string
	originUp1 string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmAuth *mAuthServiceMockAuth) Optional() *mAuthServiceMockAuth {
	mmAuth.optional = true
	return mmAuth
}

// Expect sets up expected params for AuthService.Auth
func (mmAuth *mAuthServiceMockAuth) Expect(ctx context.Context, up1 *userModel.UserCreds) *mAuthServiceMockAuth {
	if mmAuth.mock.funcAuth != nil {
		mmAuth.mock.t.Fatalf("AuthServiceMock.Auth mock is already set by Set")
	}

	if mmAuth.defaultExpectation == nil {
		mmAuth.defaultExpectation = &AuthServiceMockAuthExpectation{}
	}

	if mmAuth.defaultExpectation.paramPtrs != nil {
		mmAuth.mock.t.Fatalf("AuthServiceMock.Auth mock is already set by ExpectParams functions")
	}

	mmAuth.defaultExpectation.params = &AuthServiceMockAuthParams{ctx, up1}
	mmAuth.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmAuth.expectations {
		if minimock.Equal(e.params, mmAuth.defaultExpectation.params) {
			mmAuth.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmAuth.defaultExpectation.params)
		}
	}

	return mmAuth
}

// ExpectCtxParam1 sets up expected param ctx for AuthService.Auth
func (mmAuth *mAuthServiceMockAuth) ExpectCtxParam1(ctx context.Context) *mAuthServiceMockAuth {
	if mmAuth.mock.funcAuth != nil {
		mmAuth.mock.t.Fatalf("AuthServiceMock.Auth mock is already set by Set")
	}

	if mmAuth.defaultExpectation == nil {
		mmAuth.defaultExpectation = &AuthServiceMockAuthExpectation{}
	}

	if mmAuth.defaultExpectation.params != nil {
		mmAuth.mock.t.Fatalf("AuthServiceMock.Auth mock is already set by Expect")
	}

	if mmAuth.defaultExpectation.paramPtrs == nil {
		mmAuth.defaultExpectation.paramPtrs = &AuthServiceMockAuthParamPtrs{}
	}
	mmAuth.defaultExpectation.paramPtrs.ctx = &ctx
	mmAuth.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmAuth
}

// ExpectUp1Param2 sets up expected param up1 for AuthService.Auth
func (mmAuth *mAuthServiceMockAuth) ExpectUp1Param2(up1 *userModel.UserCreds) *mAuthServiceMockAuth {
	if mmAuth.mock.funcAuth != nil {
		mmAuth.mock.t.Fatalf("AuthServiceMock.Auth mock is already set by Set")
	}

	if mmAuth.defaultExpectation == nil {
		mmAuth.defaultExpectation = &AuthServiceMockAuthExpectation{}
	}

	if mmAuth.defaultExpectation.params != nil {
		mmAuth.mock.t.Fatalf("AuthServiceMock.Auth mock is already set by Expect")
	}

	if mmAuth.defaultExpectation.paramPtrs == nil {
		mmAuth.defaultExpectation.paramPtrs = &AuthServiceMockAuthParamPtrs{}
	}
	mmAuth.defaultExpectation.paramPtrs.up1 = &up1
	mmAuth.defaultExpectation.expectationOrigins.originUp1 = minimock.CallerInfo(1)

	return mmAuth
}

// Inspect accepts an inspector function that has same arguments as the AuthService.Auth
func (mmAuth *mAuthServiceMockAuth) Inspect(f func(ctx context.Context, up1 *userModel.UserCreds)) *mAuthServiceMockAuth {
	if mmAuth.mock.inspectFuncAuth != nil {
		mmAuth.mock.t.Fatalf("Inspect function is already set for AuthServiceMock.Auth")
	}

	mmAuth.mock.inspectFuncAuth = f

	return mmAuth
}

// Return sets up results that will be returned by AuthService.Auth
func (mmAuth *mAuthServiceMockAuth) Return(s1 string, err error) *AuthServiceMock {
	if mmAuth.mock.funcAuth != nil {
		mmAuth.mock.t.Fatalf("AuthServiceMock.Auth mock is already set by Set")
	}

	if mmAuth.defaultExpectation == nil {
		mmAuth.defaultExpectation = &AuthServiceMockAuthExpectation{mock: mmAuth.mock}
	}
	mmAuth.defaultExpectation.results = &AuthServiceMockAuthResults{s1, err}
	mmAuth.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmAuth.mock
}

// Set uses given function f to mock the AuthService.Auth method
func (mmAuth *mAuthServiceMockAuth) Set(f func(ctx context.Context, up1 *userModel.UserCreds) (s1 string, err error)) *AuthServiceMock {
	if mmAuth.defaultExpectation != nil {
		mmAuth.mock.t.Fatalf("Default expectation is already set for the AuthService.Auth method")
	}

	if len(mmAuth.expectations) > 0 {
		mmAuth.mock.t.Fatalf("Some expectations are already set for the AuthService.Auth method")
	}

	mmAuth.mock.funcAuth = f
	mmAuth.mock.funcAuthOrigin = minimock.CallerInfo(1)
	return mmAuth.mock
}

// When sets expectation for the AuthService.Auth which will trigger the result defined by the following
// Then helper
func (mmAuth *mAuthServiceMockAuth) When(ctx context.Context, up1 *userModel.UserCreds) *AuthServiceMockAuthExpectation {
	if mmAuth.mock.funcAuth != nil {
		mmAuth.mock.t.Fatalf("AuthServiceMock.Auth mock is already set by Set")
	}

	expectation := &AuthServiceMockAuthExpectation{
		mock:               mmAuth.mock,
		params:             &AuthServiceMockAuthParams{ctx, up1},
		expectationOrigins: AuthServiceMockAuthExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmAuth.expectations = append(mmAuth.expectations, expectation)
	return expectation
}

// Then sets up AuthService.Auth return parameters for the expectation previously defined by the When method
func (e *AuthServiceMockAuthExpectation) Then(s1 string, err error) *AuthServiceMock {
	e.results = &AuthServiceMockAuthResults{s1, err}
	return e.mock
}

// Times sets number of times AuthService.Auth should be invoked
func (mmAuth *mAuthServiceMockAuth) Times(n uint64) *mAuthServiceMockAuth {
	if n == 0 {
		mmAuth.mock.t.Fatalf("Times of AuthServiceMock.Auth mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmAuth.expectedInvocations, n)
	mmAuth.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmAuth
}

func (mmAuth *mAuthServiceMockAuth) invocationsDone() bool {
	if len(mmAuth.expectations) == 0 && mmAuth.defaultExpectation == nil && mmAuth.mock.funcAuth == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmAuth.mock.afterAuthCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmAuth.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Auth implements mm_service.AuthService
func (mmAuth *AuthServiceMock) Auth(ctx context.Context, up1 *userModel.UserCreds) (s1 string, err error) {
	mm_atomic.AddUint64(&mmAuth.beforeAuthCounter, 1)
	defer mm_atomic.AddUint64(&mmAuth.afterAuthCounter, 1)

	mmAuth.t.Helper()

	if mmAuth.inspectFuncAuth != nil {
		mmAuth.inspectFuncAuth(ctx, up1)
	}

	mm_params := AuthServiceMockAuthParams{ctx, up1}

	// Record call args
	mmAuth.AuthMock.mutex.Lock()
	mmAuth.AuthMock.callArgs = append(mmAuth.AuthMock.callArgs, &mm_params)
	mmAuth.AuthMock.mutex.Unlock()

	for _, e := range mmAuth.AuthMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.s1, e.results.err
		}
	}

	if mmAuth.AuthMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmAuth.AuthMock.defaultExpectation.Counter, 1)
		mm_want := mmAuth.AuthMock.defaultExpectation.params
		mm_want_ptrs := mmAuth.AuthMock.defaultExpectation.paramPtrs

		mm_got := AuthServiceMockAuthParams{ctx, up1}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmAuth.t.Errorf("AuthServiceMock.Auth got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmAuth.AuthMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.up1 != nil && !minimock.Equal(*mm_want_ptrs.up1, mm_got.up1) {
				mmAuth.t.Errorf("AuthServiceMock.Auth got unexpected parameter up1, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmAuth.AuthMock.defaultExpectation.expectationOrigins.originUp1, *mm_want_ptrs.up1, mm_got.up1, minimock.Diff(*mm_want_ptrs.up1, mm_got.up1))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmAuth.t.Errorf("AuthServiceMock.Auth got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmAuth.AuthMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmAuth.AuthMock.defaultExpectation.results
		if mm_results == nil {
			mmAuth.t.Fatal("No results are set for the AuthServiceMock.Auth")
		}
		return (*mm_results).s1, (*mm_results).err
	}
	if mmAuth.funcAuth != nil {
		return mmAuth.funcAuth(ctx, up1)
	}
	mmAuth.t.Fatalf("Unexpected call to AuthServiceMock.Auth. %v %v", ctx, up1)
	return
}

// AuthAfterCounter returns a count of finished AuthServiceMock.Auth invocations
func (mmAuth *AuthServiceMock) AuthAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmAuth.afterAuthCounter)
}

// AuthBeforeCounter returns a count of AuthServiceMock.Auth invocations
func (mmAuth *AuthServiceMock) AuthBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmAuth.beforeAuthCounter)
}

// Calls returns a list of arguments used in each call to AuthServiceMock.Auth.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmAuth *mAuthServiceMockAuth) Calls() []*AuthServiceMockAuthParams {
	mmAuth.mutex.RLock()

	argCopy := make([]*AuthServiceMockAuthParams, len(mmAuth.callArgs))
	copy(argCopy, mmAuth.callArgs)

	mmAuth.mutex.RUnlock()

	return argCopy
}

// MinimockAuthDone returns true if the count of the Auth invocations corresponds
// the number of defined expectations
func (m *AuthServiceMock) MinimockAuthDone() bool {
	if m.AuthMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.AuthMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.AuthMock.invocationsDone()
}

// MinimockAuthInspect logs each unmet expectation
func (m *AuthServiceMock) MinimockAuthInspect() {
	for _, e := range m.AuthMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to AuthServiceMock.Auth at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterAuthCounter := mm_atomic.LoadUint64(&m.afterAuthCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.AuthMock.defaultExpectation != nil && afterAuthCounter < 1 {
		if m.AuthMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to AuthServiceMock.Auth at\n%s", m.AuthMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to AuthServiceMock.Auth at\n%s with params: %#v", m.AuthMock.defaultExpectation.expectationOrigins.origin, *m.AuthMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcAuth != nil && afterAuthCounter < 1 {
		m.t.Errorf("Expected call to AuthServiceMock.Auth at\n%s", m.funcAuthOrigin)
	}

	if !m.AuthMock.invocationsDone() && afterAuthCounter > 0 {
		m.t.Errorf("Expected %d calls to AuthServiceMock.Auth at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.AuthMock.expectedInvocations), m.AuthMock.expectedInvocationsOrigin, afterAuthCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *AuthServiceMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockAuthInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *AuthServiceMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *AuthServiceMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockAuthDone()
}
