// Code generated by http://github.com/gojuno/minimock (v3.4.5). DO NOT EDIT.

package mocks

//go:generate minimock -i github.com/Krab1o/avito-backend-assignment-2025/internal/service.InfoService -o info_service_mimimock.go -n InfoServiceMock -p mocks

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	infoModel "github.com/Krab1o/avito-backend-assignment-2025/internal/service/info/model"
	"github.com/gojuno/minimock/v3"
)

// InfoServiceMock implements mm_service.InfoService
type InfoServiceMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcInfo          func(ctx context.Context, i1 int64) (ip1 *infoModel.Info, err error)
	funcInfoOrigin    string
	inspectFuncInfo   func(ctx context.Context, i1 int64)
	afterInfoCounter  uint64
	beforeInfoCounter uint64
	InfoMock          mInfoServiceMockInfo
}

// NewInfoServiceMock returns a mock for mm_service.InfoService
func NewInfoServiceMock(t minimock.Tester) *InfoServiceMock {
	m := &InfoServiceMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.InfoMock = mInfoServiceMockInfo{mock: m}
	m.InfoMock.callArgs = []*InfoServiceMockInfoParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mInfoServiceMockInfo struct {
	optional           bool
	mock               *InfoServiceMock
	defaultExpectation *InfoServiceMockInfoExpectation
	expectations       []*InfoServiceMockInfoExpectation

	callArgs []*InfoServiceMockInfoParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// InfoServiceMockInfoExpectation specifies expectation struct of the InfoService.Info
type InfoServiceMockInfoExpectation struct {
	mock               *InfoServiceMock
	params             *InfoServiceMockInfoParams
	paramPtrs          *InfoServiceMockInfoParamPtrs
	expectationOrigins InfoServiceMockInfoExpectationOrigins
	results            *InfoServiceMockInfoResults
	returnOrigin       string
	Counter            uint64
}

// InfoServiceMockInfoParams contains parameters of the InfoService.Info
type InfoServiceMockInfoParams struct {
	ctx context.Context
	i1  int64
}

// InfoServiceMockInfoParamPtrs contains pointers to parameters of the InfoService.Info
type InfoServiceMockInfoParamPtrs struct {
	ctx *context.Context
	i1  *int64
}

// InfoServiceMockInfoResults contains results of the InfoService.Info
type InfoServiceMockInfoResults struct {
	ip1 *infoModel.Info
	err error
}

// InfoServiceMockInfoOrigins contains origins of expectations of the InfoService.Info
type InfoServiceMockInfoExpectationOrigins struct {
	origin    string
	originCtx string
	originI1  string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmInfo *mInfoServiceMockInfo) Optional() *mInfoServiceMockInfo {
	mmInfo.optional = true
	return mmInfo
}

// Expect sets up expected params for InfoService.Info
func (mmInfo *mInfoServiceMockInfo) Expect(ctx context.Context, i1 int64) *mInfoServiceMockInfo {
	if mmInfo.mock.funcInfo != nil {
		mmInfo.mock.t.Fatalf("InfoServiceMock.Info mock is already set by Set")
	}

	if mmInfo.defaultExpectation == nil {
		mmInfo.defaultExpectation = &InfoServiceMockInfoExpectation{}
	}

	if mmInfo.defaultExpectation.paramPtrs != nil {
		mmInfo.mock.t.Fatalf("InfoServiceMock.Info mock is already set by ExpectParams functions")
	}

	mmInfo.defaultExpectation.params = &InfoServiceMockInfoParams{ctx, i1}
	mmInfo.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmInfo.expectations {
		if minimock.Equal(e.params, mmInfo.defaultExpectation.params) {
			mmInfo.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmInfo.defaultExpectation.params)
		}
	}

	return mmInfo
}

// ExpectCtxParam1 sets up expected param ctx for InfoService.Info
func (mmInfo *mInfoServiceMockInfo) ExpectCtxParam1(ctx context.Context) *mInfoServiceMockInfo {
	if mmInfo.mock.funcInfo != nil {
		mmInfo.mock.t.Fatalf("InfoServiceMock.Info mock is already set by Set")
	}

	if mmInfo.defaultExpectation == nil {
		mmInfo.defaultExpectation = &InfoServiceMockInfoExpectation{}
	}

	if mmInfo.defaultExpectation.params != nil {
		mmInfo.mock.t.Fatalf("InfoServiceMock.Info mock is already set by Expect")
	}

	if mmInfo.defaultExpectation.paramPtrs == nil {
		mmInfo.defaultExpectation.paramPtrs = &InfoServiceMockInfoParamPtrs{}
	}
	mmInfo.defaultExpectation.paramPtrs.ctx = &ctx
	mmInfo.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmInfo
}

// ExpectI1Param2 sets up expected param i1 for InfoService.Info
func (mmInfo *mInfoServiceMockInfo) ExpectI1Param2(i1 int64) *mInfoServiceMockInfo {
	if mmInfo.mock.funcInfo != nil {
		mmInfo.mock.t.Fatalf("InfoServiceMock.Info mock is already set by Set")
	}

	if mmInfo.defaultExpectation == nil {
		mmInfo.defaultExpectation = &InfoServiceMockInfoExpectation{}
	}

	if mmInfo.defaultExpectation.params != nil {
		mmInfo.mock.t.Fatalf("InfoServiceMock.Info mock is already set by Expect")
	}

	if mmInfo.defaultExpectation.paramPtrs == nil {
		mmInfo.defaultExpectation.paramPtrs = &InfoServiceMockInfoParamPtrs{}
	}
	mmInfo.defaultExpectation.paramPtrs.i1 = &i1
	mmInfo.defaultExpectation.expectationOrigins.originI1 = minimock.CallerInfo(1)

	return mmInfo
}

// Inspect accepts an inspector function that has same arguments as the InfoService.Info
func (mmInfo *mInfoServiceMockInfo) Inspect(f func(ctx context.Context, i1 int64)) *mInfoServiceMockInfo {
	if mmInfo.mock.inspectFuncInfo != nil {
		mmInfo.mock.t.Fatalf("Inspect function is already set for InfoServiceMock.Info")
	}

	mmInfo.mock.inspectFuncInfo = f

	return mmInfo
}

// Return sets up results that will be returned by InfoService.Info
func (mmInfo *mInfoServiceMockInfo) Return(ip1 *infoModel.Info, err error) *InfoServiceMock {
	if mmInfo.mock.funcInfo != nil {
		mmInfo.mock.t.Fatalf("InfoServiceMock.Info mock is already set by Set")
	}

	if mmInfo.defaultExpectation == nil {
		mmInfo.defaultExpectation = &InfoServiceMockInfoExpectation{mock: mmInfo.mock}
	}
	mmInfo.defaultExpectation.results = &InfoServiceMockInfoResults{ip1, err}
	mmInfo.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmInfo.mock
}

// Set uses given function f to mock the InfoService.Info method
func (mmInfo *mInfoServiceMockInfo) Set(f func(ctx context.Context, i1 int64) (ip1 *infoModel.Info, err error)) *InfoServiceMock {
	if mmInfo.defaultExpectation != nil {
		mmInfo.mock.t.Fatalf("Default expectation is already set for the InfoService.Info method")
	}

	if len(mmInfo.expectations) > 0 {
		mmInfo.mock.t.Fatalf("Some expectations are already set for the InfoService.Info method")
	}

	mmInfo.mock.funcInfo = f
	mmInfo.mock.funcInfoOrigin = minimock.CallerInfo(1)
	return mmInfo.mock
}

// When sets expectation for the InfoService.Info which will trigger the result defined by the following
// Then helper
func (mmInfo *mInfoServiceMockInfo) When(ctx context.Context, i1 int64) *InfoServiceMockInfoExpectation {
	if mmInfo.mock.funcInfo != nil {
		mmInfo.mock.t.Fatalf("InfoServiceMock.Info mock is already set by Set")
	}

	expectation := &InfoServiceMockInfoExpectation{
		mock:               mmInfo.mock,
		params:             &InfoServiceMockInfoParams{ctx, i1},
		expectationOrigins: InfoServiceMockInfoExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmInfo.expectations = append(mmInfo.expectations, expectation)
	return expectation
}

// Then sets up InfoService.Info return parameters for the expectation previously defined by the When method
func (e *InfoServiceMockInfoExpectation) Then(ip1 *infoModel.Info, err error) *InfoServiceMock {
	e.results = &InfoServiceMockInfoResults{ip1, err}
	return e.mock
}

// Times sets number of times InfoService.Info should be invoked
func (mmInfo *mInfoServiceMockInfo) Times(n uint64) *mInfoServiceMockInfo {
	if n == 0 {
		mmInfo.mock.t.Fatalf("Times of InfoServiceMock.Info mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmInfo.expectedInvocations, n)
	mmInfo.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmInfo
}

func (mmInfo *mInfoServiceMockInfo) invocationsDone() bool {
	if len(mmInfo.expectations) == 0 && mmInfo.defaultExpectation == nil && mmInfo.mock.funcInfo == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmInfo.mock.afterInfoCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmInfo.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Info implements mm_service.InfoService
func (mmInfo *InfoServiceMock) Info(ctx context.Context, i1 int64) (ip1 *infoModel.Info, err error) {
	mm_atomic.AddUint64(&mmInfo.beforeInfoCounter, 1)
	defer mm_atomic.AddUint64(&mmInfo.afterInfoCounter, 1)

	mmInfo.t.Helper()

	if mmInfo.inspectFuncInfo != nil {
		mmInfo.inspectFuncInfo(ctx, i1)
	}

	mm_params := InfoServiceMockInfoParams{ctx, i1}

	// Record call args
	mmInfo.InfoMock.mutex.Lock()
	mmInfo.InfoMock.callArgs = append(mmInfo.InfoMock.callArgs, &mm_params)
	mmInfo.InfoMock.mutex.Unlock()

	for _, e := range mmInfo.InfoMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.ip1, e.results.err
		}
	}

	if mmInfo.InfoMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmInfo.InfoMock.defaultExpectation.Counter, 1)
		mm_want := mmInfo.InfoMock.defaultExpectation.params
		mm_want_ptrs := mmInfo.InfoMock.defaultExpectation.paramPtrs

		mm_got := InfoServiceMockInfoParams{ctx, i1}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmInfo.t.Errorf("InfoServiceMock.Info got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmInfo.InfoMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.i1 != nil && !minimock.Equal(*mm_want_ptrs.i1, mm_got.i1) {
				mmInfo.t.Errorf("InfoServiceMock.Info got unexpected parameter i1, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmInfo.InfoMock.defaultExpectation.expectationOrigins.originI1, *mm_want_ptrs.i1, mm_got.i1, minimock.Diff(*mm_want_ptrs.i1, mm_got.i1))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmInfo.t.Errorf("InfoServiceMock.Info got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmInfo.InfoMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmInfo.InfoMock.defaultExpectation.results
		if mm_results == nil {
			mmInfo.t.Fatal("No results are set for the InfoServiceMock.Info")
		}
		return (*mm_results).ip1, (*mm_results).err
	}
	if mmInfo.funcInfo != nil {
		return mmInfo.funcInfo(ctx, i1)
	}
	mmInfo.t.Fatalf("Unexpected call to InfoServiceMock.Info. %v %v", ctx, i1)
	return
}

// InfoAfterCounter returns a count of finished InfoServiceMock.Info invocations
func (mmInfo *InfoServiceMock) InfoAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmInfo.afterInfoCounter)
}

// InfoBeforeCounter returns a count of InfoServiceMock.Info invocations
func (mmInfo *InfoServiceMock) InfoBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmInfo.beforeInfoCounter)
}

// Calls returns a list of arguments used in each call to InfoServiceMock.Info.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmInfo *mInfoServiceMockInfo) Calls() []*InfoServiceMockInfoParams {
	mmInfo.mutex.RLock()

	argCopy := make([]*InfoServiceMockInfoParams, len(mmInfo.callArgs))
	copy(argCopy, mmInfo.callArgs)

	mmInfo.mutex.RUnlock()

	return argCopy
}

// MinimockInfoDone returns true if the count of the Info invocations corresponds
// the number of defined expectations
func (m *InfoServiceMock) MinimockInfoDone() bool {
	if m.InfoMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.InfoMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.InfoMock.invocationsDone()
}

// MinimockInfoInspect logs each unmet expectation
func (m *InfoServiceMock) MinimockInfoInspect() {
	for _, e := range m.InfoMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to InfoServiceMock.Info at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterInfoCounter := mm_atomic.LoadUint64(&m.afterInfoCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.InfoMock.defaultExpectation != nil && afterInfoCounter < 1 {
		if m.InfoMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to InfoServiceMock.Info at\n%s", m.InfoMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to InfoServiceMock.Info at\n%s with params: %#v", m.InfoMock.defaultExpectation.expectationOrigins.origin, *m.InfoMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcInfo != nil && afterInfoCounter < 1 {
		m.t.Errorf("Expected call to InfoServiceMock.Info at\n%s", m.funcInfoOrigin)
	}

	if !m.InfoMock.invocationsDone() && afterInfoCounter > 0 {
		m.t.Errorf("Expected %d calls to InfoServiceMock.Info at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.InfoMock.expectedInvocations), m.InfoMock.expectedInvocationsOrigin, afterInfoCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *InfoServiceMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockInfoInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *InfoServiceMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *InfoServiceMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockInfoDone()
}
