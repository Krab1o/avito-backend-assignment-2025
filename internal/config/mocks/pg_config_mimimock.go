// Code generated by http://github.com/gojuno/minimock (v3.4.5). DO NOT EDIT.

package mocks

//go:generate minimock -i github.com/Krab1o/avito-backend-assignment-2025/internal/config.PGConfig -o pg_config_mimimock.go -n PGConfigMock -p mocks

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// PGConfigMock implements mm_config.PGConfig
type PGConfigMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcDSN          func() (s1 string)
	funcDSNOrigin    string
	inspectFuncDSN   func()
	afterDSNCounter  uint64
	beforeDSNCounter uint64
	DSNMock          mPGConfigMockDSN
}

// NewPGConfigMock returns a mock for mm_config.PGConfig
func NewPGConfigMock(t minimock.Tester) *PGConfigMock {
	m := &PGConfigMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.DSNMock = mPGConfigMockDSN{mock: m}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mPGConfigMockDSN struct {
	optional           bool
	mock               *PGConfigMock
	defaultExpectation *PGConfigMockDSNExpectation
	expectations       []*PGConfigMockDSNExpectation

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// PGConfigMockDSNExpectation specifies expectation struct of the PGConfig.DSN
type PGConfigMockDSNExpectation struct {
	mock *PGConfigMock

	results      *PGConfigMockDSNResults
	returnOrigin string
	Counter      uint64
}

// PGConfigMockDSNResults contains results of the PGConfig.DSN
type PGConfigMockDSNResults struct {
	s1 string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmDSN *mPGConfigMockDSN) Optional() *mPGConfigMockDSN {
	mmDSN.optional = true
	return mmDSN
}

// Expect sets up expected params for PGConfig.DSN
func (mmDSN *mPGConfigMockDSN) Expect() *mPGConfigMockDSN {
	if mmDSN.mock.funcDSN != nil {
		mmDSN.mock.t.Fatalf("PGConfigMock.DSN mock is already set by Set")
	}

	if mmDSN.defaultExpectation == nil {
		mmDSN.defaultExpectation = &PGConfigMockDSNExpectation{}
	}

	return mmDSN
}

// Inspect accepts an inspector function that has same arguments as the PGConfig.DSN
func (mmDSN *mPGConfigMockDSN) Inspect(f func()) *mPGConfigMockDSN {
	if mmDSN.mock.inspectFuncDSN != nil {
		mmDSN.mock.t.Fatalf("Inspect function is already set for PGConfigMock.DSN")
	}

	mmDSN.mock.inspectFuncDSN = f

	return mmDSN
}

// Return sets up results that will be returned by PGConfig.DSN
func (mmDSN *mPGConfigMockDSN) Return(s1 string) *PGConfigMock {
	if mmDSN.mock.funcDSN != nil {
		mmDSN.mock.t.Fatalf("PGConfigMock.DSN mock is already set by Set")
	}

	if mmDSN.defaultExpectation == nil {
		mmDSN.defaultExpectation = &PGConfigMockDSNExpectation{mock: mmDSN.mock}
	}
	mmDSN.defaultExpectation.results = &PGConfigMockDSNResults{s1}
	mmDSN.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmDSN.mock
}

// Set uses given function f to mock the PGConfig.DSN method
func (mmDSN *mPGConfigMockDSN) Set(f func() (s1 string)) *PGConfigMock {
	if mmDSN.defaultExpectation != nil {
		mmDSN.mock.t.Fatalf("Default expectation is already set for the PGConfig.DSN method")
	}

	if len(mmDSN.expectations) > 0 {
		mmDSN.mock.t.Fatalf("Some expectations are already set for the PGConfig.DSN method")
	}

	mmDSN.mock.funcDSN = f
	mmDSN.mock.funcDSNOrigin = minimock.CallerInfo(1)
	return mmDSN.mock
}

// Times sets number of times PGConfig.DSN should be invoked
func (mmDSN *mPGConfigMockDSN) Times(n uint64) *mPGConfigMockDSN {
	if n == 0 {
		mmDSN.mock.t.Fatalf("Times of PGConfigMock.DSN mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmDSN.expectedInvocations, n)
	mmDSN.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmDSN
}

func (mmDSN *mPGConfigMockDSN) invocationsDone() bool {
	if len(mmDSN.expectations) == 0 && mmDSN.defaultExpectation == nil && mmDSN.mock.funcDSN == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmDSN.mock.afterDSNCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmDSN.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// DSN implements mm_config.PGConfig
func (mmDSN *PGConfigMock) DSN() (s1 string) {
	mm_atomic.AddUint64(&mmDSN.beforeDSNCounter, 1)
	defer mm_atomic.AddUint64(&mmDSN.afterDSNCounter, 1)

	mmDSN.t.Helper()

	if mmDSN.inspectFuncDSN != nil {
		mmDSN.inspectFuncDSN()
	}

	if mmDSN.DSNMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmDSN.DSNMock.defaultExpectation.Counter, 1)

		mm_results := mmDSN.DSNMock.defaultExpectation.results
		if mm_results == nil {
			mmDSN.t.Fatal("No results are set for the PGConfigMock.DSN")
		}
		return (*mm_results).s1
	}
	if mmDSN.funcDSN != nil {
		return mmDSN.funcDSN()
	}
	mmDSN.t.Fatalf("Unexpected call to PGConfigMock.DSN.")
	return
}

// DSNAfterCounter returns a count of finished PGConfigMock.DSN invocations
func (mmDSN *PGConfigMock) DSNAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDSN.afterDSNCounter)
}

// DSNBeforeCounter returns a count of PGConfigMock.DSN invocations
func (mmDSN *PGConfigMock) DSNBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDSN.beforeDSNCounter)
}

// MinimockDSNDone returns true if the count of the DSN invocations corresponds
// the number of defined expectations
func (m *PGConfigMock) MinimockDSNDone() bool {
	if m.DSNMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.DSNMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.DSNMock.invocationsDone()
}

// MinimockDSNInspect logs each unmet expectation
func (m *PGConfigMock) MinimockDSNInspect() {
	for _, e := range m.DSNMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to PGConfigMock.DSN")
		}
	}

	afterDSNCounter := mm_atomic.LoadUint64(&m.afterDSNCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.DSNMock.defaultExpectation != nil && afterDSNCounter < 1 {
		m.t.Errorf("Expected call to PGConfigMock.DSN at\n%s", m.DSNMock.defaultExpectation.returnOrigin)
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDSN != nil && afterDSNCounter < 1 {
		m.t.Errorf("Expected call to PGConfigMock.DSN at\n%s", m.funcDSNOrigin)
	}

	if !m.DSNMock.invocationsDone() && afterDSNCounter > 0 {
		m.t.Errorf("Expected %d calls to PGConfigMock.DSN at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.DSNMock.expectedInvocations), m.DSNMock.expectedInvocationsOrigin, afterDSNCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *PGConfigMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockDSNInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *PGConfigMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *PGConfigMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockDSNDone()
}
