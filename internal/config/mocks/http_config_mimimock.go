// Code generated by http://github.com/gojuno/minimock (v3.4.5). DO NOT EDIT.

package mocks

//go:generate minimock -i github.com/Krab1o/avito-backend-assignment-2025/internal/config.HTTPConfig -o http_config_mimimock.go -n HTTPConfigMock -p mocks

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// HTTPConfigMock implements mm_config.HTTPConfig
type HTTPConfigMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcPort          func() (s1 string)
	funcPortOrigin    string
	inspectFuncPort   func()
	afterPortCounter  uint64
	beforePortCounter uint64
	PortMock          mHTTPConfigMockPort
}

// NewHTTPConfigMock returns a mock for mm_config.HTTPConfig
func NewHTTPConfigMock(t minimock.Tester) *HTTPConfigMock {
	m := &HTTPConfigMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.PortMock = mHTTPConfigMockPort{mock: m}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mHTTPConfigMockPort struct {
	optional           bool
	mock               *HTTPConfigMock
	defaultExpectation *HTTPConfigMockPortExpectation
	expectations       []*HTTPConfigMockPortExpectation

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// HTTPConfigMockPortExpectation specifies expectation struct of the HTTPConfig.Port
type HTTPConfigMockPortExpectation struct {
	mock *HTTPConfigMock

	results      *HTTPConfigMockPortResults
	returnOrigin string
	Counter      uint64
}

// HTTPConfigMockPortResults contains results of the HTTPConfig.Port
type HTTPConfigMockPortResults struct {
	s1 string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmPort *mHTTPConfigMockPort) Optional() *mHTTPConfigMockPort {
	mmPort.optional = true
	return mmPort
}

// Expect sets up expected params for HTTPConfig.Port
func (mmPort *mHTTPConfigMockPort) Expect() *mHTTPConfigMockPort {
	if mmPort.mock.funcPort != nil {
		mmPort.mock.t.Fatalf("HTTPConfigMock.Port mock is already set by Set")
	}

	if mmPort.defaultExpectation == nil {
		mmPort.defaultExpectation = &HTTPConfigMockPortExpectation{}
	}

	return mmPort
}

// Inspect accepts an inspector function that has same arguments as the HTTPConfig.Port
func (mmPort *mHTTPConfigMockPort) Inspect(f func()) *mHTTPConfigMockPort {
	if mmPort.mock.inspectFuncPort != nil {
		mmPort.mock.t.Fatalf("Inspect function is already set for HTTPConfigMock.Port")
	}

	mmPort.mock.inspectFuncPort = f

	return mmPort
}

// Return sets up results that will be returned by HTTPConfig.Port
func (mmPort *mHTTPConfigMockPort) Return(s1 string) *HTTPConfigMock {
	if mmPort.mock.funcPort != nil {
		mmPort.mock.t.Fatalf("HTTPConfigMock.Port mock is already set by Set")
	}

	if mmPort.defaultExpectation == nil {
		mmPort.defaultExpectation = &HTTPConfigMockPortExpectation{mock: mmPort.mock}
	}
	mmPort.defaultExpectation.results = &HTTPConfigMockPortResults{s1}
	mmPort.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmPort.mock
}

// Set uses given function f to mock the HTTPConfig.Port method
func (mmPort *mHTTPConfigMockPort) Set(f func() (s1 string)) *HTTPConfigMock {
	if mmPort.defaultExpectation != nil {
		mmPort.mock.t.Fatalf("Default expectation is already set for the HTTPConfig.Port method")
	}

	if len(mmPort.expectations) > 0 {
		mmPort.mock.t.Fatalf("Some expectations are already set for the HTTPConfig.Port method")
	}

	mmPort.mock.funcPort = f
	mmPort.mock.funcPortOrigin = minimock.CallerInfo(1)
	return mmPort.mock
}

// Times sets number of times HTTPConfig.Port should be invoked
func (mmPort *mHTTPConfigMockPort) Times(n uint64) *mHTTPConfigMockPort {
	if n == 0 {
		mmPort.mock.t.Fatalf("Times of HTTPConfigMock.Port mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmPort.expectedInvocations, n)
	mmPort.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmPort
}

func (mmPort *mHTTPConfigMockPort) invocationsDone() bool {
	if len(mmPort.expectations) == 0 && mmPort.defaultExpectation == nil && mmPort.mock.funcPort == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmPort.mock.afterPortCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmPort.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Port implements mm_config.HTTPConfig
func (mmPort *HTTPConfigMock) Port() (s1 string) {
	mm_atomic.AddUint64(&mmPort.beforePortCounter, 1)
	defer mm_atomic.AddUint64(&mmPort.afterPortCounter, 1)

	mmPort.t.Helper()

	if mmPort.inspectFuncPort != nil {
		mmPort.inspectFuncPort()
	}

	if mmPort.PortMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmPort.PortMock.defaultExpectation.Counter, 1)

		mm_results := mmPort.PortMock.defaultExpectation.results
		if mm_results == nil {
			mmPort.t.Fatal("No results are set for the HTTPConfigMock.Port")
		}
		return (*mm_results).s1
	}
	if mmPort.funcPort != nil {
		return mmPort.funcPort()
	}
	mmPort.t.Fatalf("Unexpected call to HTTPConfigMock.Port.")
	return
}

// PortAfterCounter returns a count of finished HTTPConfigMock.Port invocations
func (mmPort *HTTPConfigMock) PortAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmPort.afterPortCounter)
}

// PortBeforeCounter returns a count of HTTPConfigMock.Port invocations
func (mmPort *HTTPConfigMock) PortBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmPort.beforePortCounter)
}

// MinimockPortDone returns true if the count of the Port invocations corresponds
// the number of defined expectations
func (m *HTTPConfigMock) MinimockPortDone() bool {
	if m.PortMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.PortMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.PortMock.invocationsDone()
}

// MinimockPortInspect logs each unmet expectation
func (m *HTTPConfigMock) MinimockPortInspect() {
	for _, e := range m.PortMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to HTTPConfigMock.Port")
		}
	}

	afterPortCounter := mm_atomic.LoadUint64(&m.afterPortCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.PortMock.defaultExpectation != nil && afterPortCounter < 1 {
		m.t.Errorf("Expected call to HTTPConfigMock.Port at\n%s", m.PortMock.defaultExpectation.returnOrigin)
	}
	// if func was set then invocations count should be greater than zero
	if m.funcPort != nil && afterPortCounter < 1 {
		m.t.Errorf("Expected call to HTTPConfigMock.Port at\n%s", m.funcPortOrigin)
	}

	if !m.PortMock.invocationsDone() && afterPortCounter > 0 {
		m.t.Errorf("Expected %d calls to HTTPConfigMock.Port at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.PortMock.expectedInvocations), m.PortMock.expectedInvocationsOrigin, afterPortCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *HTTPConfigMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockPortInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *HTTPConfigMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *HTTPConfigMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockPortDone()
}
